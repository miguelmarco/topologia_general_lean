import data.set.finite
import .conjuntos
import .topologicos
import tactic


namespace topologicos

open topologicos.espacio_topologico
open set

/-
En esta secci√≥n, `X` va a ser un espacio topol√≥gico
-/
variables {X : Type} [espacio_topologico X]

/-
Definimos base como una familia de abiertos que genera toda la topolog√≠a mediante uniones
-/
def base (‚Ñ¨ : set (set X)) := 
‚Ñ¨ ‚äÜ abiertos ‚àß 
‚àÄ (U : set X), abierto U ‚Üí  ‚àÉ ‚Ñ± ‚äÜ ‚Ñ¨, U = ‚ãÉ‚ÇÄ ‚Ñ± 

lemma base_discreto : @base X (discreta X) { ({x}) | x : X} :=
begin
  sorry,  --completar como ejercicio
end


lemma caracterizacion_base (‚Ñ¨ : set (set X)) (hB :‚Ñ¨ ‚äÜ abiertos) : 
base ‚Ñ¨ ‚Üî  ‚àÄ (U : set X), abierto U ‚Üí ‚àÄ x ‚àà U, ‚àÉ B‚Çì ‚àà ‚Ñ¨, B‚Çì ‚äÜ U ‚àß x ‚àà B‚Çì :=
begin
  split,
  {
    intros hBbase U hU x hx,
    cases hBbase with hBab hB‚Ñ±,
    specialize hB‚Ñ± U hU,
    cases hB‚Ñ± with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±‚Ñ¨ hU‚Ñ±,
    rw  hU‚Ñ± at hx,
    cases hx with B‚Çì hB‚Çì,
    cases hB‚Çì with hB‚Çì‚Ñ± hxB‚Çì,
    use B‚Çì,
    split,
    {
      apply h‚Ñ±‚Ñ¨,
      exact hB‚Çì‚Ñ±,
    },
    split,
    {
      rw hU‚Ñ±,
      intros y hy,
      use B‚Çì,
      split,
        exact hB‚Çì‚Ñ±,
        exact hy,
    },
    {
      exact hxB‚Çì,
    },
  },
  {
    intro h,
    split,
    {
      exact hB,
    },
    {
      intros U hU,
      specialize h U hU,
      use { B ‚àà ‚Ñ¨ | B ‚äÜ U },
      split,
      {
        simp only [set.sep_subset],
      },
      {
        ext x,
        split,
        {
          intro hxU,
          specialize h x hxU,
          cases h with B‚Çì hB‚Çì,
          cases hB‚Çì with hB‚Çì‚Ñ¨ hB‚Çì,
          cases hB‚Çì with hxB‚Çì hB‚ÇìU,
          use B‚Çì,
          split,
          split,
            repeat {assumption},
        },
        {
          intro hx,
          cases hx with B‚Çì hB‚Çì,
          cases hB‚Çì with hB‚Çì hxB‚Çì,
          cases hB‚Çì with hB‚Çì‚Ñ¨ hB‚ÇìU,
          apply hB‚ÇìU,
          exact hxB‚Çì,
        },
      },
    },
  },
end

lemma continua_sii_preimagen_abierto_basico {X Y : Type} 
[ùíØ‚Çì:espacio_topologico X]
[espacio_topologico Y]
(‚Ñ¨ : set (set Y))
(h‚Ñ¨ : base ‚Ñ¨)
(f : X ‚Üí Y)
:
continua f ‚Üî ‚àÄ U ‚àà ‚Ñ¨, f ‚Åª¬π' U ‚àà ùíØ‚Çì.abiertos  :=
begin
  unfold base at h‚Ñ¨,
  cases h‚Ñ¨ with h‚Ñ¨ab h‚Ñ¨Un,
  split,
  {
    intro h,
    intros U hU,
    apply h,
    apply h‚Ñ¨ab,
    exact hU,
  },
  {
    intro h,
    intros U hU,
    specialize h‚Ñ¨Un U hU,
    cases h‚Ñ¨Un with  ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±‚Ñ¨ h‚Ñ±U,
    rw h‚Ñ±U,
    rw preimagen_union_familia',
    apply abierto_union,
    intros U2 hU2,
    cases hU2 with V hV,
    cases hV with hV‚Ñ± hVU2,
    rw ‚Üê hVU2,
    apply h,
    apply h‚Ñ±‚Ñ¨,
    exact hV‚Ñ±,
  }
end


def B1 {X : Type} (‚Ñ± : set (set X)) := univ = ‚ãÉ‚ÇÄ ‚Ñ± 
def B2 {X : Type} (‚Ñ± : set (set X)) := ‚àÄ (B1 B2 : set X), B1 ‚àà ‚Ñ± ‚Üí B2 ‚àà ‚Ñ± ‚Üí ‚àÄ x ‚àà B1 ‚à© B2, ‚àÉ B3 ‚àà ‚Ñ±, x ‚àà B3 ‚àß B3 ‚äÜ B1 ‚à© B2    

lemma propiedades_base {X : Type} [espacio_topologico X] 
( ‚Ñ¨ : set (set X))  (h : base ‚Ñ¨) 
:
B1 ‚Ñ¨ ‚àß B2 ‚Ñ¨ :=
begin
  split,
  {
    unfold B1,
    cases h with hBab hB,
    specialize hB univ abierto_total,
    cases hB with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±‚Ñ¨ huniv,
    apply doble_contenido,
    {
      rw huniv,
      apply union_familia_contenida,
      exact h‚Ñ±‚Ñ¨,
    },
    {
      tauto,
    },
  },
  {
    intros B1 B2 hB1 hB2 x hx,
    cases h with h‚Ñ¨ab h,
    have hB1B2 : abierto (B1 ‚à© B2),
    {
      apply abierto_interseccion,
      {
        apply h‚Ñ¨ab,
        exact hB1,
      },
      {
        apply h‚Ñ¨ab,
        exact hB2,
      },
    },
    specialize h _ hB1B2,
    cases h with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±‚Ñ¨ h‚Ñ±U,
    rw h‚Ñ±U at hx,
    cases hx with B3 hB3,
    cases hB3 with hB3‚Ñ± hxB3,
    use B3,
    split,
    {
      apply h‚Ñ±‚Ñ¨,
      assumption,
    },
    split,
    {
      assumption,
    },
    {
      rw h‚Ñ±U,
      intros y hy,
      use B3,
      split,
        assumption,
        assumption,
    },
  },
end
--definimos los abiertos generados por un conjunto, como todas las posibles uniones 
def abiertos_generados {X : Type} ( ‚Ñ± : set (set X)) := {U : set X | ‚àÉ ‚Ñ±U : set (set X), ‚Ñ±U ‚äÜ  ‚Ñ± ‚àß U = ‚ãÉ‚ÇÄ ‚Ñ±U }


--veamos que hay una topolog√≠a dada por una familia que cumple B1 y B2
def  topologia_generada {X : Type} (‚Ñ± : set (set X)) (h1 : B1 ‚Ñ±) (h2 : B2 ‚Ñ±) : espacio_topologico X :=
{ abiertos := abiertos_generados ‚Ñ±,
  abierto_total := begin
    use ‚Ñ±,
    split,
    {
      tauto,
    },
    exact h1,
  end,
  abierto_vacio := begin
    use ‚àÖ,
    simp only [set.empty_subset, set.sUnion_empty, eq_self_iff_true, and_self],
  end,
  abierto_union := begin
    intros ‚Ñ±1 h‚Ñ±1,
    use {U ‚àà ‚Ñ± | U ‚äÜ ‚ãÉ‚ÇÄ ‚Ñ±1},
    split,
    {
      intros U hU,
      cases hU with hU1 hU2,
      exact hU1,
    },
    {
      ext x,
      split,
      {
        intro hx,
        cases hx with U hU,
        cases hU with hU‚Ñ±1 hxU,
        specialize h‚Ñ±1 hU‚Ñ±1,
        cases h‚Ñ±1 with ‚Ñ±U h‚Ñ±U,
        cases h‚Ñ±U with h‚Ñ±U‚Ñ± h‚Ñ±U,
        rw h‚Ñ±U at hxU,
        cases hxU with V hV, 
        cases hV with hV‚Ñ±1 hxV,
        use V,
        split,
        {
          split,
          {
            exact h‚Ñ±U‚Ñ± hV‚Ñ±1,
          },
          {
            dsimp,
            intros y hyV,
            use U,
            split,
            {
              exact hU‚Ñ±1,
            },
            {
              rw h‚Ñ±U,
              use V,
              exact ‚ü® hV‚Ñ±1,hyV‚ü©,
            },
          },
        },
        {
          exact hxV,
        },
      },
      {
        intro hx,
        cases hx with U hU,
        cases hU with hU‚Ñ± hxU,
        cases hU‚Ñ± with hU‚Ñ± hUU‚Ñ±,
        apply hUU‚Ñ± hxU,
      },
    },
  end,
  abierto_interseccion := begin
    intros U V hU hV,
    cases hU with FU hFU,
    cases hFU with hFU‚Ñ± hFUU,
    cases hV with FV hFV,
    cases hFV with hFV‚Ñ± hFVV,
    use { S ‚àà ‚Ñ± | S ‚äÜ U ‚à© V},
    split,
    {
      simp only [sep_subset],
    },
    {
      ext x,
      split,
      {
        intro hx,
        cases hx with hxU hxV,
        rw hFUU at hxU,
        cases hxU with Ux hUx,
        cases hUx with hUxFU hxUx,
        rw hFVV at hxV,
        cases hxV with Vx hVx,
        cases hVx with hVxFV hxVx,
        specialize h2 Ux Vx _ _ x _,
        {
          tauto,
        },
        {
          tauto,
        },
        {
          split,
          assumption,
          assumption,
        },
        cases h2 with W hW,
        cases hW with hW‚Ñ± hW,
        cases hW with hxW hWUxVx,
        use W,
        split,
        {
          split,
          {
            assumption,
          },
          {
            simp at *,
            cases hWUxVx with hWUx hWVx,
            split,
            {
              rw hFUU,
              intros y hy,
              use Ux,
              tauto,
            },
            {
              rw hFVV,
              intros y hy,
              use Vx,
              tauto,
            },
          },
        },
        {
          exact hxW,
        },
      },
      {
        intro hx,
        cases hx with S hS,
        cases hS with hSProp hxS,
        cases hSProp with hS‚Ñ± hSUV,
        apply hSUV,
        exact hxS,
      },
    },
  end }

-- veamos tambi√©n que la familia es base de esa topolog√≠a

lemma base_de_topologia_generada (‚Ñ¨ : set (set X)) (h1 : B1 ‚Ñ¨) (h2 : B2 ‚Ñ¨) :
@base X (topologia_generada ‚Ñ¨ h1 h2 ) ‚Ñ¨ :=
begin
  rw caracterizacion_base,
  {
    intros U hU x hxU,
    cases hU with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±‚Ñ¨ h‚Ñ±U,
    rw h‚Ñ±U at hxU ‚ä¢,
    cases hxU with B‚Çì hB‚Çì,
    cases hB‚Çì with hB‚Çì‚Ñ± hxB‚Çì,
    use B‚Çì,
    split,
    {
      apply h‚Ñ±‚Ñ¨,
      exact hB‚Çì‚Ñ±,
    },
    split,
    {
      intros y hy,
      use B‚Çì,
      split,
        assumption,
        assumption,
    },
    {
      exact hxB‚Çì,
    },
  },
  {
    intros U hU,
    use {U},
    simp,
    exact hU,
  }
end

lemma topologia_determinada_base {X : Type} 
[œÑ1 : espacio_topologico X]
(B : set (set X)) 
(h1 : base B)
:
œÑ1 = topologia_generada B (propiedades_base B h1).1 (propiedades_base B h1).2:=
begin
  ext U,
  unfold base at h1,
  cases h1 with h1ab h1U, 
  split,
  { 
    intro h,
    specialize h1U U h,
    cases h1U with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±B hU‚Ñ±,
    use ‚Ñ±,
    tauto,
  },
  {
    intro h,
    cases h with ‚Ñ± h‚Ñ±,
    cases h‚Ñ± with h‚Ñ±B h‚Ñ±U,
    rw h‚Ñ±U,
    apply abierto_union,
    tauto,
  },
end

lemma existe_topologia_base_sii_B1_B2 (X : Type) (B : set (set X)) : (‚àÉ (œÑ : espacio_topologico X), @base X œÑ B) ‚Üî B1 B ‚àß B2 B :=
begin
  split,
  {
    intro h,
    cases h with œÑ hB,
    apply @propiedades_base X œÑ, 
    exact hB,
  },
  {
    intro h,
    cases h with hB1 hB2,
    let œÑ := topologia_generada B hB1 hB2,
    use œÑ,
    apply @base_de_topologia_generada X œÑ,
  }
end

lemma prop_2_2_8 (‚Ñ¨ ‚Ñ¨': set (set X)) (h1 : base ‚Ñ¨) (hab : ‚Ñ¨' ‚äÜ abiertos) :
 base ‚Ñ¨' ‚Üî ‚àÄ B ‚àà ‚Ñ¨, ‚àÄ x ‚àà B, ‚àÉ B' ‚àà ‚Ñ¨', B' ‚äÜ B ‚àß x ‚àà B' :=
begin
  split,
  {
    intro hBase,
    intros B hB x hx,
    cases h1 with h‚Ñ¨ab h‚Ñ¨,
    rw caracterizacion_base ‚Ñ¨' hab at hBase,
    apply hBase,
    {
      apply h‚Ñ¨ab,
      exact hB,
    },
    {
      exact hx,
    },
  },
  {
    intro h,
    rw caracterizacion_base ‚Ñ¨' hab,
    rw caracterizacion_base at h1,
    {
      intros U hU x hx,
      specialize h1 U hU x hx,
      cases h1 with B‚Çì hB‚Çì,
      cases hB‚Çì with hB‚Çì‚Ñ¨ hxB‚Çì,
      cases hxB‚Çì with hB‚ÇìU hxB‚Çì,
      specialize h  B‚Çì hB‚Çì‚Ñ¨ x hxB‚Çì,
      cases h with B' hB',
      cases hB' with hB'‚Ñ¨' hxB',
      cases hxB' with hxB‚Çì hB‚ÇìU,
      use B',
      tauto,
    },
    {
      apply h1.1,
    },
  }
end 


def subconjuntos_finitos (F : set (set X)) := { I | I ‚äÜ F ‚àß I.finite}

def subbase (S : set (set X))  := S ‚äÜ abiertos ‚àß base { (‚ãÇ‚ÇÄ F) | F ‚àà subconjuntos_finitos S}


lemma continua_sii_preimagen_abierto_subbasico {X Y : Type} 
[ùíØ‚Çì:espacio_topologico X]
[espacio_topologico Y]
(S : set (set Y))
(hS : subbase S)
(f : X ‚Üí Y)
:
continua f ‚Üî ‚àÄ U ‚àà S, f ‚Åª¬π' U ‚àà ùíØ‚Çì.abiertos  :=
begin
  cases hS with hSab hSbas,
  split,
  {
    intro h,
    intros U hU,
    apply h,
    apply hSab,
    exact hU,
  },
  {
    rw continua_sii_preimagen_abierto_basico _ hSbas,
    intro h,
    intros V hV,
    simp at hV,
    cases hV with W hW,
    cases hW with hWfin hVW,
    cases hWfin with hWsub hWfin,
    rw ‚Üê hVW,
    rw preimagen_interseccion_familia',
    apply abierto_interseccion_finita,
    {
      intros U hU,
      cases hU with V' hV',
      cases hV' with hV'W hV'U,
      rw ‚Üê hV'U,
      apply h,
      apply hWsub,
      exact hV'W,
    },
    {
      apply familia_parametrizada_finita,
      exact hWfin,
    } 
  }
end

def topologia_generada_subbase (S : set (set X)) : espacio_topologico X :=
begin
  apply topologia_generada { (‚ãÇ‚ÇÄ F) | F ‚àà subconjuntos_finitos S},
  {
    ext x,
    simp,
    use ‚àÖ,
    simp,
    split,
    {
      tauto,
    },
    {
      simp only [finite_empty],
    }
  },
  {
    intros B1 B2 hB1 hB2 x hx,
    simp  at *,
    cases hB1 with S1 hS1,
    cases hS1 with hS1fin hS1B1,
    cases hS1fin with hS1S hS1fin,
    cases hB2 with S2 hS2,
    cases hS2 with hS2fin hS2B2,
    cases hS2fin with hS2S hS2fin,
    cases hx with hxB1 hxB2,
    use (S1 ‚à™ S2),
    split,
    {
      split,
      {
        intros y hy,
        cases hy,
        {
          apply hS1S,
          exact hy,
        },
        {
          apply hS2S,
          exact hy,
        }
      },
      {
        simp only [finite_union],
        tauto,
      }
    },
    {
      split,
      {
        intros T hT,
        cases hT,
        {
          rw ‚Üê hS1B1 at hxB1,
          specialize hxB1 T hT,
          exact hxB1,
        },
        {
          rw ‚Üê hS2B2 at hxB2,
          specialize hxB2 T hT,
          exact hxB2,
        }
      },
      split,
      {
        intros y hy,
        rw ‚Üê hS1B1,
        intros A hA,
        apply hy,
        left,
        exact hA,
      },
      {
        intros y hy,
        rw ‚Üê hS2B2,
        intros A hA,
        apply hy,
        right,
        exact hA,
      }
    }
  }
end

lemma subbase_topologia_generada_subbase (S : set (set X)) :
@subbase X (topologia_generada_subbase S) S :=
begin
  split,
  {
    intros U hU,
    use {U},
    simp only [exists_prop, singleton_subset_iff, mem_set_of_eq, sUnion_singleton, eq_self_iff_true, and_true],
    use {U},
    simp only [sInter_singleton, eq_self_iff_true, and_true],
    split,
    {
      simp only [singleton_subset_iff],
      exact hU,
    },
    {
      simp only [finite_singleton],
    },
  },
  {
    simp only [exists_prop],
    split,
    {
      intros U hU,
      use {U},
      simp only [exists_prop, singleton_subset_iff, mem_set_of_eq, sUnion_singleton, eq_self_iff_true, and_true],
      exact hU,
    },
    {
      simp only [abierto_def, exists_prop],
      intros U hU,
      cases hU with I hI,
      simp only [exists_prop] at hI,
      use I,
      tauto,
    }
  },
end

/-
## Ejercicios
-/


/-
En este ejercicio, necesitamos las definiciones del archivo de espacios m√©tricos

para evitar conflictos con lo definido en otro sitio, lo "encerramos" en una secci√≥n separada.
y as√≠, podemos importar los nombres de lo definido para espacios m√©tricos
-/
section base_metricos
open metricos
open metricos.espacio_metrico

-- la forma de especificar la topologia que se usa es con el @ 
lemma ejer_2_2_4 (X : Type) [espacio_metrico X] : base {(bola x r) | (x : X) ( r > 0 )} :=
begin
  sorry,
end

end base_metricos

lemma ejer_2_2_6 {X : Type} [œÑ : espacio_topologico X] (B : set (set X))
(hB : base B) (œÑ' : espacio_topologico X) (h : B ‚äÜ œÑ'.abiertos) :
œÑ.abiertos ‚äÜ œÑ'.abiertos :=
begin
  sorry,
end

lemma ejer_2_2_8 (S : set (set X)) (hsAb : S ‚äÜ abiertos) : 
subbase S ‚Üî ‚àÄ (U : set X), abierto U ‚Üí  ‚àÄ x ‚àà U, ‚àÉ (‚Ñ± : set (set X)), set.finite ‚Ñ± ‚àß ‚Ñ± ‚äÜ S ‚àß x ‚àà ‚ãÇ‚ÇÄ ‚Ñ± ‚àß ‚ãÇ‚ÇÄ ‚Ñ± ‚äÜ U:=
begin
  sorry,
end


end topologicos