import .separabilidad

open topologicos topologicos.espacio_topologico

/-
# Sucesiones


## Definici√≥n 4.4.2.

Sea (X, T ) e.t. y S := {x‚Çô} una sucesi√≥n en X. Diremos que x es `l√≠mite` de S 
(o que S converge a x, en notaci√≥n x‚Çô  ‚Üí x) si ‚àÄ V entorno de x en X existe n‚ÇÄ ‚àà N tal que ‚àÄn ‚â• n‚ÇÄ
 se tiene x‚Çô ‚àà V.
-/
variables {X : Type} [espacio_topologico X]

def converge (s : ‚Ñï ‚Üí X) (x : X) := ‚àÄ U ‚àà ùìù X x, ‚àÉ n‚ÇÄ : ‚Ñï, ‚àÄ n > n‚ÇÄ, s n ‚àà U

def Lim (s : ‚Ñï ‚Üí X)  := { x : X | converge s x}

def punto_de_aglomeracion (s : ‚Ñï ‚Üí X) (x : X) := ‚àÄ U ‚àà ùìù X x, ‚àÄ n‚ÇÄ : ‚Ñï, ‚àÉ n > n‚ÇÄ , s n ‚àà U

def Agl (s : ‚Ñï ‚Üí X)  := { x : X | punto_de_aglomeracion s x}

lemma limite_en_aglomeracion  (s : ‚Ñï ‚Üí X) : Lim s ‚äÜ Agl s :=
begin
  intros x hx,
  intros E hE n‚ÇÄ,
  specialize hx E hE,
  cases hx with n‚ÇÅ hn‚ÇÅ,
  use max (n‚ÇÄ + 1) (n‚ÇÅ + 1),
  split,
    simp only [gt_iff_lt, lt_add_iff_pos_right, lt_max_iff, true_or, eq_self_iff_true, nat.lt_one_iff],
  apply hn‚ÇÅ,
    simp only [gt_iff_lt, lt_add_iff_pos_right, lt_max_iff, eq_self_iff_true, or_true, nat.lt_one_iff],
end

/-
## Observaci√≥n 4.4.4.
Observa que en las definiciones de l√≠mite y punto de
aglomeraci√≥n podemos cambiar la palabra entorno por abierto que contenga a x.
-/

lemma caracterizacion_limite_abiertos  (s : ‚Ñï ‚Üí X) (x : X) : converge s x ‚Üî ‚àÄ U : set X, abierto U ‚Üí  x ‚àà U ‚Üí  ‚àÉ n‚ÇÄ : ‚Ñï, ‚àÄ n > n‚ÇÄ, s n ‚àà U :=
begin
  split,
  {
    intro h,
    intros U hUab hxU,
    apply h,
    use U,
    tauto,
  },
  {
    intro h,
    intros E hE,
    cases hE with U hU,
    cases hU with hUab hU2,
    cases hU2 with hxU hUE,
    specialize h U hUab hxU,
    cases h with n‚ÇÄ hn‚ÇÄ,
    use n‚ÇÄ,
    intros n hn,
    specialize hn‚ÇÄ n hn,
    apply hUE,
    exact hn‚ÇÄ,
  }
end

lemma caracterizacion_aglomeracion_abiertos  (s : ‚Ñï ‚Üí X) (x : X) : punto_de_aglomeracion s x ‚Üî ‚àÄ U : set X, abierto U ‚Üí  x ‚àà U ‚Üí  ‚àÄ  n‚ÇÄ : ‚Ñï, ‚àÉ  n > n‚ÇÄ, s n ‚àà U :=
begin
  split,
  {
    intro h,
    intros U hU hxU,
    apply h,
    use U,
    tauto,
  },
  {
    intro h,
    intros E hE,
    cases hE with U hU,
    cases hU with hUab hU2,
    cases hU2 with hxU hUE,
    specialize h U hUab hxU,
    intros n‚ÇÄ,
    specialize h n‚ÇÄ,
    cases h with n hn,
    cases hn with hnn‚ÇÄ hsnU,
    use n,
    split,
      assumption,
      apply hUE,
      exact hsnU,
  }
end

/-
## Observaci√≥n 4.4.5.
Con los mismos criterios que en la Observaci√≥n 4.4.4, podemos sustituir entorno o entorno abierto por entorno b√°sico 
una vez fijada una base de entornos del punto candidato a ser l√≠mite o punto de aglomeraci√≥n. 
-/


lemma caracterizacion_limite_entornos_basicos  (s : ‚Ñï ‚Üí X) (x : X) (B : set (set X)) 
    (hB : base_de_entornos x B) : converge s x ‚Üî ‚àÄ U  ‚àà B,  ‚àÉ n‚ÇÄ : ‚Ñï, ‚àÄ n > n‚ÇÄ, s n ‚àà U :=
begin
  split,
  {
    intro h,
    intros U hU,
    apply h,
    cases hB with hB1 hB2,
    apply hB1,
    exact hU,
  },
  {
    intro h,
    intros E hE,
    cases hB with hB1 hB2,
    specialize hB2 E hE,
    cases hB2 with U hU,
    cases hU with hUB hUE,
    specialize h U hUB,
    cases h with n‚ÇÄ hn‚ÇÄ,
    use n‚ÇÄ,
    intros n hn,
    specialize hn‚ÇÄ n hn,
    apply hUE,
    exact hn‚ÇÄ,
  }
end

lemma caracterizacion_aglomeracion_entornos_basicos  (s : ‚Ñï ‚Üí X) (x : X) (B : set (set X)) 
    (hB : base_de_entornos x B) :  punto_de_aglomeracion s x ‚Üî  ‚àÄ U  ‚àà B,  ‚àÄ n‚ÇÄ : ‚Ñï, ‚àÉ n > n‚ÇÄ, s n ‚àà U :=
begin
  split,
  {
    intro h,
    intros U hU,
    apply h,
    apply hB.1,
    exact hU,
  },
  {
    intro h,
    intros E hE,
    cases hB with hB1 hB2,
    specialize hB2 E hE,
    cases hB2 with U hU,
    cases hU with hUB hUE,
    specialize h U hUB,
    intro n‚ÇÄ,
    specialize h n‚ÇÄ,
    cases h with n hn,
    cases hn with hn1 hn2,
    use n,
    split,
      exact hn1,
    {
      apply hUE,
      exact hn2,
    },
  },
end


/-
Una sucesi√≥n `t` es una *subsucesi√≥n* de otra sucesi√≥n `t` si existe una sucesi√≥n creciente de n√∫meros naturales `k` tal que
`s = t ‚àò k`
-/
def creciente (k : ‚Ñï ‚Üí ‚Ñï ) := ‚àÄ a b : ‚Ñï , a < b ‚Üí k a < k b
/-
Nos ser√° √∫til esta propiedad de sucesiones crecientes:
-/
lemma creciente_mayor_identidad {k : ‚Ñï ‚Üí ‚Ñï} (hk : creciente k) (a : ‚Ñï )  : a ‚â§ k a :=
begin
  induction a with n hind,
  {
    simp only [nat.nat_zero_eq_zero, zero_le'],
  },
  {
    specialize hk n n.succ (lt_add_one n),
    rw nat.succ_le_iff,
    linarith,
  }
end


def subsucesion  (t : ‚Ñï ‚Üí X) (s : ‚Ñï ‚Üí X) := ‚àÉ (k : ‚Ñï ‚Üí ‚Ñï ), creciente k ‚àß t = s ‚àò k

/-
Una sucesi√≥n `t` es *truncada* de otra sucesi√≥n `s` si hay un `m ‚àà ‚Ñï` tal que `s(n) = t(n + m)`
-/
def truncada  (t : ‚Ñï ‚Üí X) (s : ‚Ñï ‚Üí X) := ‚àÉ (m : ‚Ñï), ‚àÄ a : ‚Ñï, t a = s (a + m)

/-
Dos sucesiones son *asint√≥ticas* si hay una truncaci√≥n com√∫n.
-/
def asintotica  (s : ‚Ñï ‚Üí X) (t : ‚Ñï ‚Üí X) := ‚àÉ (r : ‚Ñï ‚Üí X), truncada r s ‚àß truncada r t


def constante  (s : ‚Ñï ‚Üí X) (x : X ) :=  ‚àÄ (a : ‚Ñï ), s a = x
/-
Una sucesi√≥n es *casiconstante* si tiene una truncaci√≥n constante
-/
def casiconstante  (s : ‚Ñï ‚Üí X) (x : X) := ‚àÉ t : (‚Ñï ‚Üí X), constante t x ‚àß truncada t s

/-
Es claro que en un espacio topol√≥gico, una sucesi√≥n casiconstante converge a la constante.

Ser√° √∫til este lema:

`nat.sub_add_cancel : ‚àÄ {n m : ‚Ñï}, m ‚â§ n ‚Üí n - m + m = n`

(se puede usar para reescribir, pero notar que, como la resta de n√∫meros naturales no es una operaci√≥n interna, requiere
demostrar que el sustraendo no es mayor que el minuendo)
-/
lemma casiconstante_converge (s : ‚Ñï ‚Üí X) (x : X) (hs : casiconstante s x) : x ‚àà Lim s :=
begin
  cases hs with t ht,
  cases ht with ht1 ht2,
  cases ht2 with m hm,
  intros U hU,
  use m + 1,
  intros n hn,
  specialize hm (n - m),
  rw ht1 at hm,
  rw nat.sub_add_cancel at hm,
  {
    rw ‚Üê hm,
    cases hU with V hV,
    tauto,
  },
  linarith,
end

/-
Otra forma de decir que `x ‚àà X` es l√≠mite de la sucesi√≥n S ‚äÇ X es que todo entorno de x contiene una subsucesi√≥n truncada de S.
-/
lemma converge_carac_truncada  (s : ‚Ñï ‚Üí X) (x : X) : 
    converge s x ‚Üî ‚àÄ U ‚àà ùìù X x, ‚àÉ t : ‚Ñï ‚Üí X, truncada t s ‚àß  ‚àÄ n : ‚Ñï, t n ‚àà U :=
begin
  split,
  {
    intro h,
    intros U hU,
    specialize h U hU,
    cases h with n‚ÇÄ hn‚ÇÄ,
    use Œª n, s (n + n‚ÇÄ +1),
    split,
    {
      use n‚ÇÄ +1,
      ring_nf,
      simp only [eq_self_iff_true, forall_const],
    },
    intro n,
    apply hn‚ÇÄ,
    linarith,
  },
  {
    intro h,
    intros U hU,
    specialize h U hU,
    cases h with t ht,
    cases ht with ht1 ht2,
    cases ht1 with n‚ÇÄ hn‚ÇÄ,
    use n‚ÇÄ,
    intros n hn,
    specialize hn‚ÇÄ (n - n‚ÇÄ),
    rw nat.sub_add_cancel at hn‚ÇÄ,
    {
      rw ‚Üê hn‚ÇÄ,
      apply ht2,
    },
    linarith,
  },
end

/-
## Propiedades 4.4.10

Sea `s‚Ä≤` subsucesi√≥n de `s`, entonces `Lim‚Çì s ‚äÇ Lƒ±m‚Çì s‚Ä≤ ‚äÇ Agl‚Çì s`.
-/
lemma lim_subsusc_contenido (s : ‚Ñï ‚Üí X) (s' : ‚Ñï ‚Üí X) (h : subsucesion s' s) : Lim s ‚äÜ Lim s' :=
begin
  intros x hx,
  intros E hE,
  specialize hx E hE,
  cases hx with n‚ÇÄ hn‚ÇÄ,
  cases h with k hk,
  cases hk with hkcr hkcss',
  use (n‚ÇÄ),
  intros n hn,
  rw hkcss',
  simp only [function.comp_app],
  apply hn‚ÇÄ,
  have haux := creciente_mayor_identidad hkcr n,
  linarith,
end

lemma lim_subsusc_contenido_agl (s : ‚Ñï ‚Üí X) (s' : ‚Ñï ‚Üí X) (h : subsucesion s' s) : Lim s' ‚äÜ Agl s  :=
begin
  intros x hx E hE n‚ÇÄ,
  cases h with k hk,
  cases hk with hkcr hkcomp,
  specialize hx E hE,
  cases hx with n‚ÇÅ hn‚ÇÅ,
  rw hkcomp at hn‚ÇÅ,
  specialize hn‚ÇÅ (max n‚ÇÄ n‚ÇÅ  + 1) _,
  {
    have haux := le_max_right n‚ÇÄ n‚ÇÅ,
    linarith,
  },
  use k (max n‚ÇÄ n‚ÇÅ + 1),
  split,
  {
    have hm := creciente_mayor_identidad hkcr (max n‚ÇÄ n‚ÇÅ + 1),
    have haux := le_max_left n‚ÇÄ n‚ÇÅ,
    linarith,
  },
  {
    exact hn‚ÇÅ,
  },
end

/-
Sea s‚Çú subsucesi√≥n truncada de s, entonces Lim s‚Çú = Lim s.
-/
lemma limite_subsucesion_truncada (s s‚Çú: ‚Ñï ‚Üí X) (h : truncada s‚Çú s) : Lim s‚Çú = Lim s :=
begin
  ext x,
  split,
  {
    intro hx,
    intros E hE,
    specialize hx E hE,
    cases h with k hk,
    cases hx with n‚ÇÄ hn‚ÇÄ,
    use n‚ÇÄ + k,
    intros n hn,
    specialize hn‚ÇÄ (n - k) _,
    simp at *,
    have haux : n = n‚ÇÄ + k + (n - (n‚ÇÄ + k)),
    {
      rw add_comm,
      rw nat.sub_add_cancel,
      linarith,
    },
    rw haux,
    rw add_comm,
    rw ‚Üê add_assoc,
    rw nat.add_sub_cancel,
    linarith,
    rw hk at hn‚ÇÄ,
    have haux : n - k + k = n,
    {
      apply nat.sub_add_cancel,
      linarith,
    },
    rw haux at hn‚ÇÄ,
    exact hn‚ÇÄ,
  },
  {
    intro h,
    intros E hE,
    specialize h E hE,
    cases h with n‚ÇÄ hn‚ÇÄ,
    use n‚ÇÄ,
    intros n hn,
    cases h with k hk,
    rw hk,
    apply hn‚ÇÄ,
    linarith,
  }
end

/-
Sea s‚Çê una sucesi√≥n asint√≥tica a s, entonces Lim s‚Çê = Lim s.
-/
lemma limite_sucesion_asintotica (s s‚Çê : ‚Ñï ‚Üí X) (h : asintotica s‚Çê s) : Lim s‚Çê = Lim s :=
begin
  cases h with t ht,
  cases ht with hs‚Çê hs,
  rw ‚Üê limite_subsucesion_truncada s t hs,
  rw limite_subsucesion_truncada s‚Çê t hs‚Çê,
end

/-
Si s ‚äÇ A ‚äÇ X entonces Lim s ‚äÇ Agl s ‚äÇ clausura A.
-/
lemma aglomeracion_contenida_clausura_imagen (s : ‚Ñï ‚Üí X) (A : set X) (h : set.range s ‚äÜ A) : Agl s ‚äÜ clausura A :=
begin
  intros x hx,
  rw clausura_caracterizacion_entorno,
  intros V hV,
  specialize hx V hV,
  specialize hx 0,
  cases hx with n hn,
  cases hn with hn0 hsn,
  rw no_vacio_sii_existe_elemento,
  use s n,
  split,
  {
    apply h,
    simp only [set.mem_range_self],
  },
  {
    exact hsn,
  }
end

/-
Sea Y espacio topol√≥gico y sea f : X ‚Üí Y continua, entonces f (Lim S) ‚äÇ
Lim f (S), es decir, si x‚Çô ‚Üí x entonces f (x‚Çô) ‚Üí f (x). 
-/
lemma imagen_continua_limite_contenida_limite_composicion {Y : Type} [espacio_topologico Y] (f : X ‚Üí Y) (hf : continua f) (s : ‚Ñï ‚Üí X) :
f '' (Lim s ) ‚äÜ Lim (f ‚àò s) :=
begin
  intros y hy,
  cases hy with x hx,
  cases hx with hxl hfxy,
  simp only [Lim, set.mem_set_of_eq] at ‚ä¢ hxl,
  rw caracterizacion_limite_abiertos at ‚ä¢ hxl,
  intros U hU hyU,
  specialize hf U hU,
  specialize hxl _ hf _,
  {
    simp only [set.mem_preimage, hfxy],
    exact hyU,
  },
  exact hxl,
end

/-
Lo mismo ocurre para la aglomeraci√≥n.
-/
lemma imagen_continua_aglomeracion_contenida_aglomeracion_composicion {Y : Type} [espacio_topologico Y] (f : X ‚Üí Y) (hf : continua f) (s : ‚Ñï ‚Üí X) :
f '' (Agl s ) ‚äÜ Agl (f ‚àò s) :=
begin
  intros y hy,
  cases hy with x hx,
  cases hx with hxl hfxy,
  simp only [Agl, set.mem_set_of_eq] at ‚ä¢ hxl,
  rw caracterizacion_aglomeracion_abiertos at ‚ä¢ hxl,
  intros U hU hyU,
  specialize hf U hU,
  specialize hxl _ hf _,
  {
    simp only [set.mem_preimage, hfxy],
    exact hyU,
  },
  exact hxl,
end

def hausdorff (X : Type) [espacio_topologico X] := ‚àÄ x y : X, x ‚â† y ‚Üí  ‚àÉ U V : set X, abierto U ‚àß abierto V ‚àß x ‚àà U ‚àß y ‚àà V ‚àß U ‚à© V = ‚àÖ 

/-
El l√≠mite de sucesiones convergentes en espacios topol√≥gicos Hausdorff es
√∫nico.
-/
lemma limite_unico_en_hasudorff (hX : hausdorff X) (s : ‚Ñï ‚Üí X) (x y : X) (hx : converge s x) (hy : converge s y) : x = y :=
begin
  rw caracterizacion_limite_abiertos at hx hy,
  by_contradiction hn,
  specialize hX x y hn,
  rcases hX with ‚ü®U,‚ü®V,‚ü®hU,‚ü®hV,‚ü®hxU,‚ü®hyV,hUV‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©,
  specialize hx U hU hxU,
  specialize hy V hV hyV,
  cases hx with nx hnx,
  cases hy with ny hny,
  specialize hnx (nx + ny + 1) (by linarith),
  specialize hny (nx + ny + 1) (by linarith),
  have haux : s (nx + ny + 1) ‚àà U ‚à© V,
  {
    split,
    repeat {assumption},
  },
  rw hUV at haux,
  apply haux,
end